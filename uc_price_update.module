<?php
// $Id$

/**
 * @file
 * Makes changes to Ubercart prices using a Multiplier; all holds barred!
 */

/**
 * Implementation of hook_menu().
 */
function uc_price_update_menu() {
  $items = array();
  $items['admin/store/products/uc_price_update'] = array(
    'title' => 'UC price updates',
    'page callback' => 'uc_price_update_form_page',
    'access arguments' => array('bulk update ubercart prices'),
    'type' => MENU_LOCAL_TASK,
    'description' => 'Ubercart price update form'
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_price_update_perm() {
  return array('bulk update ubercart prices');
}

// create a form
function uc_price_update_form_page() {
  drupal_set_title(t('UC price updates'));

  $output = t('This form allows you to alter all prices for a given product type by a multiplier. It also allows you to test your multipliers prior to making massive pricing udpates.');
  // Return the HTML generated from the $form data structure.
  $output .= drupal_get_form('uc_price_update_form');

  return $output;
}

/**
 * Menu callback.
 */
function uc_price_update_form($form_state) {

  $uc_product_type_names = uc_product_type_names();
  $price_types = array('cost', 'sell_price', 'list_price');

  $form['instructions'] = array(
      '#title' => t('Instructions'),
      '#type' => 'fieldset',
      '#description' =>
       '<p><strong>Note:</strong> to make the calculation we do the following: </p>
        <ul>
          <li>The Cost field and all Normal Calculations are calculated like so:
            <ul>
              <li>the new price is simply multiplied by the cost multiplier</li>
            </ul>
          </li>
          <li>Fancy Calculations (for Sell Price and List Price) are calculated like so:
            <ul>
              <li>multiply the cost by the multiplier (eg. 1.5 * 225.33 = 337.995, 1.7 * 225.33 = 383.061)</li>
              <li>round up to the nearest ten (eg. 340, 390)</li>
              <li>subtract one (eg. 339, 389)</li>
            </ul>
          </li>
          <li><strong>Important!</strong>
            <ul>
              <li>If all 3 fields are filled in for a given content type, the Cost will be updated first and the Sell Price and List Price will be updated <strong>using the new updated Cost</strong></li>
            </ul>
          </li>
        </ul>',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
  );

  $form['test_price_fs'] = array(
    '#title' => 'Test cost multiplier',
    '#type' => 'fieldset',
    '#description' => 'Used to test the calculations. No prices will be <del>harmed</del> affected if this field contains a value.',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['test_price_fs']['test_price'] = array(
    '#title' => 'Test cost',
    '#type' => 'textfield',
    '#size' => 30,
    '#description' => t('This is a test cost that will be used for each of the multipliers. If a test cost is entered, no price adjustments will be made. A results list will be generated with mock calculations.'),
    '#default_value' => $form_state['post']['test_price'],
  );

  $form['options'] = array(
    '#title' => 'Price update options',
    '#type' => 'fieldset',
    '#description' => 'Price update options',
  );
  $form['options']['calculation_options'] = array(
    '#title' => 'Calculation options',
    '#type' => 'radios',
    '#size' => 30,
    '#description' => t('This is a test cost that will be used for each of the multipliers. If a test cost is entered, no price adjustments will be made. A results list will be generated with mock calculations.'),
    '#default_value' => 'normal',
    '#options' => array(
       'normal' => 'Normal',
       'fancy'  => 'Fancy: round up to nearest 10 and subtract 1 (creating a $344 =&gt; $349 effect)'
    ),
  );


  $form['uc_product_type_names'] = array(
    '#title' => t('Product types'),
    '#type' => 'fieldset',
    '#description' => '
      <p>Enter the price multiplier for each type of product you wish to alter.</p>
      <p>Leaving a field blank skips that price adjustment.</p>',
  );

  // we're not supporting this yet @TODO
  unset($uc_product_type_names['product_kit']);

  foreach ($uc_product_type_names as $keyname => $typename) {
    $collapsible = $keyname == 'product' ? FALSE : TRUE;
    $form['uc_product_type_names'][$keyname .'_fs'] = array(
      '#title' => t($typename),
      '#type' => 'fieldset',
      '#description' => t('Enter the price multiplier as a number only: (eg. enter 1.7 for 70% increase, .7 for a 30% decrease). Leaving this field blank will not modify the price.'),
      '#collapsible' => TRUE,
      '#collapsed' => $collapsible,
    );

    $price_types = array('cost' => 'Cost', 'sell_price' => 'Sell price', 'list_price' => 'List price');
    foreach ($price_types as $price_type => $price_type_label) {
      $form['uc_product_type_names'][$keyname .'_fs'][$keyname .'_'. $price_type] = array(
        '#title' => t($typename .' '. $price_type_label),
        '#type' => 'textfield',
        '#size' => 30,
        '#description' => t('This field will update the '. $price_type_label .' for all '. $typename .' types.'),
        '#default_value' => $form_state['post'][$keyname .'_'. $price_type] != '' ? intval($form_state['post'][$keyname .'_'. $price_type]) : '',
      );
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  return $form;
}

/**
 * Validate the form.
 */
function uc_price_update_form_validate($form, &$form_state) {
  // get all product types
  $uc_product_type_names = uc_product_type_names();

  $form_errors = array();
  // these refer to the field name suffixes in the form
  $price_types = array('cost', 'sell_price', 'list_price');

  // if test_price has values, we're only testing. set errors to avoid passing
  // through form submit logic (ie updating prices) and keep the fieldsets open.
  // Calculate new prices based on test price and display results
  if ($form_state['values']['test_price'] != '' && is_numeric($form_state['values']['test_price'])) {
    form_set_error('test_price', 'Testing Price Changes: No price values have been altered');

    // do some calcs
    $price = $form_state['values']['test_price'];
    $calc_option = $form_state['values']['calculation_options'];

    // test calculation reports string
    $prices = '';

    // for each product type, go through its multipliers
    foreach ($uc_product_type_names as $typename => $realname) {
      // for every price type, perform test calculations
      foreach ($price_types as $price_type) {

        $multiplier = $form_state['values'][$typename .'_'. $price_type];

        if ($multiplier != '') {

          // keep fieldsets open and highlight test multipliers by erroring out
          form_set_error($typename .'_'. $price_type, 'Testing Price Multiplier ' . $typename .' '. $price_type);

          $calculated_price = $price * $multiplier;

          // do test calculation
          if ($price_type == 'cost' || $calc_option == 'normal') {
            $new_price = number_format($calculated_price, 2);
          }
          else {
            $new_price = ceil($calculated_price / 10) * 10;
            if ($calculated_price % 10 == 0) {
              $new_price = $new_price + 9;
              $calc_str = ' + 9';
            }
            else {
              $new_price = $new_price - 1;
              $calc_str = ' - 1';
            }
          }

          // print out results
          $prices .= '<p><strong>'. ucwords($typename .' '. str_replace('_', ' ', $price_type)) .':</strong>
                         Price $'. $price .' is now $'. $new_price .': ROUND('. $price .' * '. $multiplier .') '. $calc_str .' </p>';
        }
      }
    }

    drupal_set_message(t('<h3>Results of Test Cost Calculations:</h3>') . $prices);
  }

  // iterate through product types
  foreach ($uc_product_type_names as $keyname => $typename) {
    // for each product type, iterate through price types
    foreach ($price_types as $pricetype) {
      // get the muliplier for this Product Type's Price Type
      $mult = $form_state['values'][$keyname .'_'. $pricetype];
      if ($mult != '') {
        // if multiplier is not a valid number alert user and error out
        if (!is_numeric($mult) || $mult <= 0) {
          // set an error for each type of invalid product type - price type
          $form_errors[] = array(
            'name' => $keyname .'_'. $pricetype,
            'message' => t('@typename: @mult must be a number greater than 0.', array('@typename' => $typename .' '. ucwords($pricetype), '@mult' => $mult))
          );
        }
        else {
          // if we have a valid number, add it to form state for proccessing
          $form_state['uc_price_update_multipliers'][$keyname][$pricetype] = $mult;
        }
      }
    }
  }

  if (!empty($form_errors)) {
    drupal_set_message(t('Prices have not been updated. Please fix the form errors and try again.'), 'error');
    foreach ($form_errors as $error_data) {
      form_set_error($error_data['name'], $error_data['message']);
    }
  }
  elseif (!empty($form_state['uc_price_update_multipliers'])) {
    // set
    $form_state['uc_price_update_multiplier_exists'] = TRUE;
  }
}


/**
 * Handle post-validation form submission.
 */
function uc_price_update_form_submit($form, &$form_state) {

  // if flag is set and we have product type price multipliers, update some prices!
  if ($form_state['uc_price_update_multiplier_exists'] === TRUE && !empty($form_state['uc_price_update_multipliers'])) {
    // for each product type, go through its multipliers
    $report = '<h2>Price Update Report</h2>';
    // normal or fancy calculations
    $calc_option = $form_state['values']['calculation_options'];

    foreach ($form_state['uc_price_update_multipliers'] as $content_type => $ct_multiplier) {
      // product => array
      $report .= '<h4>'. ucwords(str_replace('_', ' ', $content_type)) .'</h4><ul>';

      foreach ($ct_multiplier as $price_type => $multiplier) {
        // if we're calculating the cost, don't round up and subtract one
        $price_type = check_plain($price_type);

        if ($price_type == 'cost' || $calc_option == 'normal') {
          $calculation = 'cost * %f';
        }
        else {
          // we're not calculating the cost, round up and subtract one
          $calculation = 'TRUNCATE(CEILING(cost * %f), -1) + 9';
        }

        $sql = "UPDATE {uc_products}
                SET %s = ". $calculation ."
                WHERE cost > 1
                  AND {uc_products}.vid IN (
                  SELECT {node}.vid FROM node WHERE {node}.type IN ('%s')
                )";
        $r = db_query($sql, $price_type, $multiplier, $content_type);

        $affected_rows = db_affected_rows();
        $report .= '<li>'. ucwords(str_replace('_', ' ', $price_type)) .' updated by a multiple of '. $multiplier .'. Affected Rows: '. $affected_rows .'.</li>';
      }
    }

    drupal_set_message($report);
  }
  else {
    drupal_set_message(t('No price multipliers exist. No prices were changed.', array('%name' => $name)));
  }
  
}
